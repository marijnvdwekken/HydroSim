services:

  # Simulation
  epanet:
    container_name: epanet
    depends_on:
      - plc-zone0
    build:
      context: ./epanet/.
      dockerfile: Dockerfile
    volumes:
      - ./epanet/app:/app
    networks:
      - plc_network

  # Central systems
  webserver:
    container_name: webserver
    build:
      context: ./webserver/. 
      dockerfile: Dockerfile
    ports:
      - "80:80"
    volumes:
      - ./webserver/log/apache2:/var/log/apache2
    networks:
      - intranet
      - database
    depends_on:
      - database
    environment:
      - WORDPRESS_DB_HOST=database:3306
      - WORDPRESS_DB_USER=root
      - WORDPRESS_DB_PASSWORD=root
      - WORDPRESS_DB_NAME=scadalts

  scadalts:
    container_name: scadalts
    image: scadalts/scadalts:v2.7.5.2
    environment:
      - CATALINA_OPTS=-Xmx2G -Xms2G
    ports:
      - "8081:8080" # Used for external access and debugging
    depends_on:
      - database
    expose:
      - "8080"
    volumes:
      - ./scadalts/tomcat_log:/usr/local/tomcat/logs:rw
<<<<<<< HEAD
      - ./scadalts/config.zip:/config.zip
      - ./scadalts/config.zip/uploads:/usr/local/tomcat/webapps/ScadaBR/graphics/uploads:ro
      - ./scadalts/config.zip/uploads:/usr/local/tomcat/webapps/ScadaBR/graphics/view_uploads:ro
      - ./scadalts/config.zip/uploads:/usr/local/tomcat/webapps/ScadaBR/WEB-INF/filedata/view_uploads:ro
      - ./scadalts/config.zip/uploads:/usr/local/tomcat/webapps/Scada-LTS/uploads:ro
=======
      - ./scadalts/config:/config.zip
      - ./scadalts/config/uploads:/usr/local/tomcat/webapps/Scada-LTS/uploads:ro
      # - ./scadalts/config/uploads:/usr/local/tomcat/webapps/ScadaBR/graphics/uploads:ro
      # - ./scadalts/config/uploads:/usr/local/tomcat/webapps/ScadaBR/graphics/view_uploads:ro
      # - ./scadalts/config/uploads:/usr/local/tomcat/webapps/ScadaBR/WEB-INF/filedata/view_uploads:ro
>>>>>>> d1a1c60b64619cc23023d725eb8f6dd319b4871b
    command:
      [
        "/usr/bin/wait-for-it",
        "--host=database",
        "--port=3306",
        "--timeout=30",
        "--strict",
        "--",
        "/usr/local/tomcat/bin/catalina.sh",
        "run"
      ]
    networks:
      - intranet
      - plc_network
      - database

  database:
    container_name: database
    image: mysql/mysql-server:8.0.32
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_USER=root
      - MYSQL_PASSWORD=root
      - MYSQL_DATABASE=scadalts
    expose:
      - "3306"
    volumes:
      - ./scadalts/db_data:/var/lib/mysql:rw
      - ./scadalts/db_conf:/etc/mysql:ro
    command: --log_bin_trust_function_creators=1
    networks:
      - database

  plc-zone0:
    container_name: plc-zone0
    depends_on:
      - scadalts
    build:
      context: ./openplc/.
      dockerfile: Dockerfile
      args:
        script: watertanklogica.st
        database: database.sh
    ports:
      - "8082:8080" # Used for external access and debugging
    expose:
      - "502"
      - "8080"
    networks:
      - plc_network

  plc-zone1:
    container_name: plc-zone1
    depends_on:
      - scadalts
    build:
      context: ./openplc/.
      dockerfile: Dockerfile
      args:
        script: waterwijklogica.st
        database: database.sh
    ports:
      - "8083:8080" # Used for external access and debugging
    expose:
      - "502"
      - "8080"
    networks:
      - plc_network

  plc-zone2:
    container_name: plc-zone2
    depends_on:
      - scadalts
    build:
      context: ./openplc/.
      dockerfile: Dockerfile
      args:
        script: waterwijklogica.st
        database: database.sh
    ports:
      - "8084:8080" # Used for external access and debugging
    expose:
      - "502"
      - "8080"
    networks:
      - plc_network

  plc-zone3:
    container_name: plc-zone3
    depends_on:
      - scadalts
    build:
      context: ./openplc/.
      dockerfile: Dockerfile
      args:
        script: waterwijklogica.st
        database: database.sh
    ports:
      - "8085:8080" # Used for external access and debugging
    expose:
      - "502"
      - "8080"
    networks:
      - plc_network

  plc-zone4:
    container_name: plc-zone4
    depends_on:
      - scadalts
    build:
      context: ./openplc/.
      dockerfile: Dockerfile
      args:
        script: waterwijklogica.st
        database: database.sh
    ports:
      - "8086:8080" # Used for external access and debugging
    expose:
      - "502"
      - "8080"
    networks:
      - plc_network

  # Monitoring
  opensearch-node:
    image: opensearchproject/opensearch:latest
    container_name: opensearch-node1
    environment:
      - cluster.name=opensearch-cluster
      - node.name=opensearch-node1
      - discovery.seed_hosts=opensearch-node1,opensearch-node1
      - cluster.initial_cluster_manager_nodes=opensearch-node1
      - bootstrap.memory_lock=true
      - OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m
    env_file:
      - opensearch/opensearch.env
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    ports:
      - 9200:9200
      - 9600:9600 # required for Performance Analyzer
    volumes:
      - opensearch-data1:/usr/share/opensearch/data
    networks:
      - opensearch-net
  opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:latest
    container_name: opensearch-dashboards
    depends_on:
      - opensearch-node
    ports:
      - 5601:5601
    expose:
      - '5601'
    environment:
      OPENSEARCH_HOSTS: '["https://opensearch-node1:9200"]'
      OPENSEARCH_USERNAME: admin
      OPENSEARCH_PASSWORD: Patat123!
      OPENSEARCH_SSL_VERIFICATION_MODE: none
      OPENSEARCH_SECURITYMULTITENANCY_ENABLED: "false"
      DISABLE_SECURITY_DASHBOARDS_PLUGIN: "true"
    networks:
      - opensearch-net
  fluent-bit:
    container_name: fluent-bit
    image: docker.io/fluent/fluent-bit
    volumes:
      - ./opensearch/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf
      - ./webserver/log/apache2/access.log:/var/log/test.log
      - fluent-bit-buffer:/var/fluent-bit/buffer
    depends_on:
      - data-prepper
    networks:
      - opensearch-net
  data-prepper:
    image: opensearchproject/data-prepper:2
    container_name: data-prepper
    volumes:
      - ./opensearch/log_pipeline.yaml:/usr/share/data-prepper/pipelines/log_pipeline.yaml
      - ./opensearch/data-prepper-config.yaml:/usr/share/data-prepper/config/data-prepper-config.yaml
    ports:
      - 2021:2021
    depends_on:
      - opensearch-node
    networks:
      - opensearch-net

volumes:
  opensearch-data1:
  fluent-bit-buffer:

networks:
  intranet:
  plc_network:
  database:
  opensearch-net:
